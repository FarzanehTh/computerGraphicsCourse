// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{
    // "gl_TessCoord" shows the barycentric coordinates of the current vertex
    // Interpolate the 3-D position of the current vertex based on its barycentric
    // coordinates and the position of the 3 original vertices of the triangle
    vec4 pos_interpolation = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);

    // Snap to a unit sphere
    sphere_fs_in = pos_interpolation.xyz / length(pos_interpolation.xyz);
    pos_fs_in = vec4(sphere_fs_in, 1);

    if (is_moon) {
        // Shrink by 70% (i.e. scale value = 30%) and shift by 2 units along the x axis
        vec3 t = vec3(2.0, 0, 0);
        pos_fs_in = translate(t) * uniform_scale(0.3) * pos_fs_in;
    }

    view_pos_fs_in = view * model(is_moon, animation_seconds) * pos_fs_in;
    normal_fs_in = normalize((inverse(transpose(view * model(is_moon, animation_seconds))) * vec4(normalize(sphere_fs_in), 1.0)).xyz);

    pos_fs_in = proj * view_pos_fs_in;
    gl_Position = pos_fs_in;
}


